    public void  testPaseHtml(){   
            String url = "http://www.javaeye.com/";   
            Document document = this.getDoc(url);//获取document   
            String gz = "//xmlns:IMG/@src";//xpath匹配   
            List nodes = this.getAttr(document,gz);//获取属性   
            String[] photoUrl = this.getUrl(nodes);//获取url   
            this.insertPhoto(this.getConn(),photoUrl);//插入图片   
    }   
    /**  
     * 获取属性  
     * @param document  
     * @param gz  
     * @return  
     */  
    public List getAttr(Document document,String gz){   
         Map nameSpaces=new HashMap();   
            XPath xpath=new DefaultXPath(gz);   
            nameSpaces.put("xmlns","http://www.w3.org/1999/xhtml");   
            xpath.setNamespaceContext(new SimpleNamespaceContext(nameSpaces));   
            List nodes=xpath.selectNodes(document);   
            return nodes;   
    }   
    /**  
     * 获取Document  
     * @param url  
     * @return  
     */  
public Document getDoc(String url){   
    DOMParser parser = new DOMParser();   
     try {   
        parser.parse(url);   
    } catch (SAXException e1) {   
        // TODO Auto-generated catch block   
        e1.printStackTrace();   
    } catch (IOException e1) {   
        // TODO Auto-generated catch block   
        e1.printStackTrace();   
    }   
     org.w3c.dom.Document doc=parser.getDocument();    
  
     //SAXReader reader = new SAXReader();   
        DOMReader domReader=new DOMReader();   
        Document document =domReader.read(doc);   
        return document;   
}   
/**  
 * 获取图片路径  
 * @param nodes  
 * @return  
 */  
    public String[] getUrl(List nodes){   
        if(nodes==null){   
            return null;   
        }   
          Iterator iter=nodes.iterator();   
          String[] url = new String[nodes.size()];   
           for(int i=0;iter.hasNext();i++){   
                Attribute attribute=(Attribute)iter.next();   
                url[i] = attribute.getValue();      
           }   
           return url;   
    }   
    /**  
     * 获取图片流  
     * @param path  
     * @return  
     */  
    public InputStream getInput(String path){   
            URL url = null;   
            try {   
                url = new URL(path);   
            } catch (MalformedURLException e1) {   
                // TODO Auto-generated catch block   
                e1.printStackTrace();   
            }   
            URLConnection conn = null;   
            try {   
                conn = url.openConnection();   
            } catch (IOException e1) {   
                // TODO Auto-generated catch block   
                e1.printStackTrace();   
            }   
            conn.setDoOutput(true);    
               
            InputStream inputStream = null;   
            try {   
                inputStream = conn.getInputStream();   
            } catch (IOException e) {   
                // TODO Auto-generated catch block   
                e.printStackTrace();   
            }   
            return inputStream;   
    }   
    /**  
     * 插入图片入数据库  
     * @param conn  
     * @param photoUrl  
     */  
public void insertPhoto(Connection conn,String[] photoUrl){   
           String sql = "insert into photo set photo = ?";   
           PreparedStatement ps;   
            
            try {   
              conn.setAutoCommit(false);   
            ps = conn.prepareStatement(sql);   
            for(int i=0;i<photoUrl.length;i++){   
                if("".equals(photoUrl[i]))continue;   
                InputStream inputStream = this.getInput("http://www.javaeye.com/"+photoUrl[i]);   
                ps.setBinaryStream(1, inputStream, inputStream.available());   
                ps.addBatch();   
                inputStream.close();   
            }   
            ps.executeBatch();   
            conn.commit();   
            conn.close();   
        } catch (SQLException e) {   
            // TODO Auto-generated catch block   
            e.printStackTrace();   
        } catch (IOException e) {   
            // TODO Auto-generated catch block   
            e.printStackTrace();   
        }   
           
}  










        //原生ajax
        var xhr=getXhr();
        xhr.onreadystatechange = function(){
    		
    		if(xhr.readyState == 1){
//    			alert("1");
    		}
    		else if(xhr.readyState == 2){
//    			alert("2");
    		}
    		else if(xhr.readyState == 3){
//    			alert("3");
    		}
    		else if(xhr.readyState == 4){
//    			alert("4");
    			if(xhr.status == 200 || xhr.status == 304){
    				
//    				console.log(xhr.responseText);
//    				
//    				var data = xhr.responseText;
//    				var datas = data.split("+");
//    				
//    				if(datas[3].replace("name:", "")=="tem1")
//    					$("#JS-wendu").text(datas[4].replace("value:", "")+"℃");
//    				if(datas[3].replace("name:", "")=="hum1")
//    		        	$("#JS-shidu").text(datas[4].replace("value:", ""));
    				
    			}
    		}
    		else{
    			
    			alert("error");
    		}
    	}
        xhr.open("POST","/TEST_SERVER/TestServlet",true);
        xhr.setRequestHeader("content-Type","application/x-www-form-urlencoded");
        //var JsonString="1";
        var realtimeData = "realtimeData";
        xhr.send("command="+realtimeData);
        
        
        
/*********************************************************************************/

package com.TXST.util;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Timestamp;

import org.junit.Test;

import test_util.Pocket;

public class ReceiveDataSocket implements Runnable {

	private String realtimeData = null;

	public String getRealTimeData() {

		return realtimeData;
	}

	public String getRealTimeData(String username) {

		String realTimeDataCopy = realtimeData;
		String[] strings = realTimeDataCopy.split("\\+");
		if (strings[0].replace("username:", "").equals(username)) {
			return realTimeDataCopy;
		} else {
			return null;
		}
	}

	@Test
	public void receive() throws IOException {

		ServerSocket ss = new ServerSocket(10005);
		System.out.println("接收线程启动~~");
		Socket s = ss.accept();

		String client = s.getRemoteSocketAddress().toString();
		System.out.println(client + "......connected");

		BufferedReader bufIn = new BufferedReader(new InputStreamReader(s.getInputStream()));

		FileWriter fWriter = new FileWriter("C:\\test.txt", true);
		String regex = "username[^password]+password.*";// "<img[^>]+>"
		// realTimeData =
		// "username:TXST+password:TXST1234+sensor:tem+name:tem1+value:18";
		// System.out.println(realTimeData.matches(regex));

		while ((realtimeData = bufIn.readLine()) != null) {

//			System.out.println("test");
//			System.out.println(realtimeData.matches(regex));
			if (realtimeData.matches(regex)) { // 正则过滤，防止部分垃圾数据

				Pocket.setRealtimeData(realtimeData);		//存入pocket用于全局共享
//				System.out.println(Pocket.getRealtimeData());

				fWriter.write(realtimeData + "+time:" + new Timestamp(System.currentTimeMillis()) + "\r\n");
				fWriter.flush();
			}
		}
		fWriter.close(); // web应用stop的时候，这些都没有执行
		s.close();
		ss.close();
		System.out.println("接收线程结束~~");

	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {

			this.receive();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}


/*****************************************************************/

        <TableRow>

            <TextView
                android:id="@+id/remote_R"
                android:layout_height="wrap_content"
                android:layout_marginTop="40dp"
                android:text="Red" />
        </TableRow>
 
       <TableRow>

            <SeekBar
                android:id="@+id/seekBarR"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
        </TableRow>

        <TableRow>

            <TextView
                android:id="@+id/remote_G"
                android:layout_height="wrap_content"
                android:layout_marginTop="30dp"
                android:text="Green" />
        </TableRow>

        <TableRow>

            <SeekBar
                android:id="@+id/seekBarG"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
        </TableRow>

        <TableRow>

            <TextView
                android:id="@+id/remote_B"
                android:layout_height="wrap_content"
                android:layout_marginTop="30dp"
                android:text="Blue" />
        </TableRow>

        <TableRow>

            <SeekBar
                android:id="@+id/seekBarB"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
        </TableRow>
      
        
        